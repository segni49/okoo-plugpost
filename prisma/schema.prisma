// PlugPost Blog Platform - Prisma Schema
// Comprehensive blog platform with user management, posts, comments, and more

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User Management
enum UserRole {
  ADMIN
  EDITOR
  CONTRIBUTOR
  SUBSCRIBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  bio           String?   @db.Text
  website       String?
  location      String?
  role          UserRole  @default(SUBSCRIBER)
  status        UserStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Blog relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  notifications Notification[]

  @@map("users")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Content Management
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String?  @default("#6366f1")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts Post[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostTag[]

  @@map("tags")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  excerpt     String?    @db.Text
  content     String     @db.Text
  featuredImage String?
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  scheduledAt DateTime?
  viewCount   Int        @default(0)
  readTime    Int?       // in minutes
  seoTitle    String?
  seoDescription String? @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  tags      PostTag[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  versions  PostVersion[]

  @@map("posts")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model PostVersion {
  id        String   @id @default(cuid())
  postId    String
  title     String
  content   String   @db.Text
  version   Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, version])
  @@map("post_versions")
}

// Engagement Models
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Nested comments (replies)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

// Notification System
enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  POST_PUBLISHED
  MENTION
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String           @db.Text
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional references
  postId    String?
  commentId String?
  fromUserId String?

  @@map("notifications")
}

// Analytics and SEO
model PostAnalytics {
  id            String   @id @default(cuid())
  postId        String   @unique
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  avgReadTime   Float?   // in seconds
  bounceRate    Float?   // percentage
  socialShares  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("post_analytics")
}

// Site Configuration
model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

// Newsletter and Email
model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  subscribed  Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter")
}
